dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
dfCars <- dfCars[-c(1,2)]
dfCars <- dfCars[complete.cases(dfCars),]
levels(dfCars$make)
levels(dfCars$body_style)
dev.new(width=10, height=8)
make = dfCars$make
price = dfCars$price
plot(make, price, ylab="Price ($)", xlab="Car Manufacturer")
abline(lm(price~make))
# Multiple Linear Regression Example
mod <- lm(price ~ make + body_style + engine_size + horsepower + highway_mpg, data=df)
summary(mod) # show results
dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
setwd("~/R/DevelopingDataProducts/DevelopingDataProducts_GitHub/DevelopingDataProducts")
dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
dfCars <- dfCars[-c(1,2)]
dfCars <- dfCars[complete.cases(dfCars),]
levels(dfCars$make)
levels(dfCars$body_style)
dev.new(width=10, height=8)
make = dfCars$make
price = dfCars$price
plot(make, price, ylab="Price ($)", xlab="Car Manufacturer")
abline(lm(price~make))
# Multiple Linear Regression Example
mod <- lm(price ~ make + body_style + engine_size + horsepower + highway_mpg, data=df)
summary(mod) # show results
# Multiple Linear Regression Example
mod <- lm(price ~ make + body_style + engine_size + horsepower + highway_mpg, data=dfCars)
summary(mod) # show results
library(shiny)
dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
dfCars <- dfCars[-c(1,2)]
dfCars <- dfCars[complete.cases(dfCars),]
levels(dfCars$make)
levels(dfCars$body_style)
dev.new(width=10, height=8)
make = dfCars$make
price = dfCars$price
plot(make, price, ylab="Price ($)", xlab="Car Manufacturer")
abline(lm(price~make))
# Multiple Linear Regression Example
mod <- lm(price ~ make + body_style + engine_size + horsepower + highway_mpg, data=dfCars)
summary(mod) # show results
make = dfCars$make
price = dfCars$price
plot(make, price, ylab="Price ($)", xlab="Car Manufacturer")
abline(lm(price~make))
dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
dfCars <- dfCars[-c(1,2)]
dfCars <- dfCars[complete.cases(dfCars),]
levels(dfCars$make)
levels(dfCars$body_style)
dev.new(width=10, height=8)
make = dfCars$make
price = dfCars$price
plot(make, price, ylab="Price ($)", xlab="Car Manufacturer")
abline(lm(price~make))
make = dfCars$make
price = dfCars$price
plot(make, price, ylab="Price ($)", xlab="Car Manufacturer")
abline(lm(price~make))
make = dfCars$make
price = dfCars$price
plot(make, price, ylab="Price ($)", xlab="Car Manufacturer")
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
runExample("01_mpg")
runExample("04_mpg")
runExample("05_sliders")
summary(dfCars)
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
runExample("06_tabsets")
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
runExample("03_reactivity")
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
dfCars <- dfCars[-c(1,2)]
dfCars <- dfCars[complete.cases(dfCars),]
carVars <- c("make", "body_style", "engine_size", "horsepower", "highway_mpg", "price" )
filter_dfCars <- dfCars[carVars, "audi"]
newdata <- subset(dfCars, make == "audi")
select=c(make, body_style, engine_size, horsepower, highway_mpg, price)
View(newdata)
select=c("make", "body_style", "engine_size", "horsepower", "highway_mpg", "price")
newdata <- subset(dfCars, make == "audi")
select=c("make", "body_style", "engine_size", "horsepower", "highway_mpg", "price")
newdata <- subset(dfCars, make == "audi",select=c("make", "body_style", "engine_size", "horsepower", "highway_mpg", "price")
)
View(newdata)
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
runExample("06_tabsets")
runExample("04_mpg")
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
make = "nissan"
body_style = "sedan"
engine_size = 140
horsepower = 100
highway_mpg = 25
newCar <- data.frame(make, body_style, engine_size, horsepower, highway_mpg)
predict(mod, newCar, interval = "prediction")
mod <- lm(price ~ make + body_style + engine_size + horsepower + highway_mpg, data=dfCars)
make = "nissan"
body_style = "sedan"
engine_size = 140
horsepower = 100
highway_mpg = 25
newCar <- data.frame(make, body_style, engine_size, horsepower, highway_mpg)
predict(mod, newCar, interval = "prediction")
pred <- predict(mod, newCar, interval = "prediction")
paste("Fit: ", pred$fit)
paste("Fit: ", pred.fit)
pred
fit
pred.fit
pred$fit
?predict
pred
summary(mod) # show results
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='chrisbens',
token='B8B54D00A45CE399756F752C487DEE3B',
secret='v2HFYUReke5sCqno+Me+ApewelO21bULYyCcXrBa')
shinyapps::deployApp()
shinyapps::deployApp(C:/Users/Chris/Documents/R/DevelopingDataProducts/DevelopingDataProducts_GitHub/DevelopingDataProducts/CarPricePrediction)
shinyapps::deployApp("C:/Users/Chris/Documents/R/DevelopingDataProducts/DevelopingDataProducts_GitHub/DevelopingDataProducts/CarPricePrediction")
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp('CarPricePrediction')
shiny::runApp()
library(rsconnect)
deployApp()
library(rsconnect)
library(shiny)
library(shinyapps)
deployApp()
install.packages("slidify")
library(slidify)
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidify", "ramnathv")
install_github("slidify", "ramnathv/slidify")
install_github("slidify")
install_github("slidify", "ramnathv")
library(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidify")
library("stringi", lib.loc="~/R/win-library/3.1")
install.packages(c("caret", "forecast", "manipulate"))
install.packages("stringi")
library(devtools)
install_github("slidify", "ramnathv")
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
author("Car Price Prediction")
slidify("index.Rmd")
publish(title = 'Car Price Prediction', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'Car Price Prediction', 'index.html', host = 'rpubs')
publish(title = 'Car Price Prediction', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'Car Price Prediction', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'Car Price Prediction', 'index.html', host = 'rpubs')
library(knitr)
browseURL(index.html)
browseURL(index.html)
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
setwd("~/R/Slidify")
library(slidify)
author('test')
slidify('index.Rmd')
library(knitr)
browseURL("index.html")
