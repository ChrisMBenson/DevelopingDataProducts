xfit <- seq(min(row_means), max(row_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red", lty=2, lwd =2)
# add a legend to the top right
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("blue", "red"))
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="Identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
install.packages("UsingR")
#Question 1
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x,y)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x,w)
library(UsingR); data(galton)
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .05 * freqData$freq,
xlab = "parent", ylab = "child")
lm1 <- lm(galton$child ~ galton$parent)
lines(galton$parent,lm1$fitted,col="red",lwd=3)
lm?
?lm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit<- lm( y ~ x - 1 )
summary(fit)
cars <- data(mtcars)
head(cars)
data(mtcars)
##Question 3##
data(mtcars)
mtcars
data(mtcars)
mtcars
fit <- lm(mpg ~ wt, mtcars)
summary(fit) # -5.34
corOfYandX <- 0.5
sdYoverX <- 2
beta1 <- corOfYandX*sdYoverX
beta1 # 1
##Question 5##
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean <- mean(x)
sd <- sd(x)
(x[1] - mean)/sd # -0.9718658
cor <- 0.4
zi <- 1.5
beta1 <- cor*zi
beta1 # 1
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit<- lm( y ~ x)
summary(fit) # 0.8263
##Question 9##
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .05 * freqData$freq,
xlab = "parent", ylab = "child")
lm1 <- lm(galton$child ~ galton$parent)
lines(galton$parent,lm1$fitted,col="red",lwd=3)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit) # as.factor(cyl)8  -6.0709
fit2 <- lm(mpg ~ as.factor(cyl), data=mtcars)
summary(fit2)$coef[3] # -11.56364
summary(fit)$coef[3] # -6.07086
summary(fit)
fit3 <- lm(mpg ~ as.factor(cyl)*wt, data=mtcars)
summary(fit3)
result <- anova(fit, fit3, test="Chi")
result$Pr # 0.1037502
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data=mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
lm.influence(fit5)$hat[5] # 0.9945734
dfbetas(fit5)[5, 2] # -133.8226
library(ggplot2)
data(mtcars)
mtcars[1:3, ] # Sample Data
names(mtcars) <- c("mpg", "cylinders", "displacement", "horsepower", "acceleration", "weight",
"quartermiletime","valves","transmission", "gears","carburetors")
mtcars$transmission <- factor(mtcars$transmission)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
mtcars$carburetors <- factor(mtcars$carburetors)
mtcars$valves <- factor(mtcars$valves)
str(mtcars)
result <- t.test(mpg ~ transmission)
result$p.value
result$estimate
library(ggplot2)
data(mtcars)
mtcars[1:3, ] # Sample Data
names(mtcars) <- c("mpg", "cylinders", "displacement", "horsepower", "acceleration", "weight",
"quartermiletime","valves","transmission", "gears","carburetors")
mtcars$transmission <- factor(mtcars$transmission)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
mtcars$carburetors <- factor(mtcars$carburetors)
mtcars$valves <- factor(mtcars$valves)
attach(mtcars)
result <- t.test(mpg ~ transmission)
result$p.value
result$estimate
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel) # results hidden
boxplot(mpg ~ transmission, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
library(ggplot2)
data(mtcars)
mtcars[1:3, ] # Sample Data
names(mtcars) <- c("mpg", "cylinders", "displacement", "horsepower", "acceleration", "weight",
"quartermiletime","vorstrengine","transmission", "gears","carburetors")
mtcars$transmission <- factor(mtcars$transmission)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
mtcars$carburetors <- factor(mtcars$carburetors)
mtcars$valves <- factor(mtcars$vorstrengine)
levels(mtcars$transmission) <- c("automatic", "manual")
attach(mtcars)
result <- t.test(mpg ~ transmission)
result$p.value
result$estimate
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel) # results hidden
boxplot(mpg ~ transmission, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
boxplot(mpg ~ transmission, ylab="MPG",
main="Boxplot of MPG vs. Transmission")
stepmodel <- step(regmodel, k=log(nrow(mtcars)))
summary(stepmodel)
regmodel <- lm(mpg ~ ., data=mtcars)
summary(regmodel)
stepmodel <- step(regmodel, k=log(nrow(mtcars)))
summary(stepmodel)
library(ggplot2)
data(mtcars)
mtcars[1:3, ] # Sample Data
mtcars
library(ggplot2)
data(mtcars)
mtcars[1:3, ] # Sample Data
names(mtcars) <- c("mpg", "cylinders", "displacement", "horsepower", "acceleration", "weight",
"quartermiletime","vorstrengine","transmission", "gears","carburetors")
mtcars$transmission <- factor(mtcars$transmission)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
mtcars$carburetors <- factor(mtcars$carburetors)
mtcars$vorstrengine <- factor(mtcars$vorstrengine)
levels(mtcars$transmission) <- c("automatic", "manual")
mtcars
attach(mtcars)
library(ggplot2)
data(mtcars)
mtcars[1:3, ] # Sample Data
names(mtcars) <- c("mpg", "cylinders", "displacement", "horsepower", "acceleration", "weight",
"quartermiletime","vorstrengine","transmission", "gears","carburetors")
mtcars$transmission <- factor(mtcars$transmission)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
mtcars$carburetors <- factor(mtcars$carburetors)
mtcars$vorstrengine <- factor(mtcars$vorstrengine)
levels(mtcars$transmission) <- c("automatic", "manual")
mtcars
attach(mtcars)
result <- t.test(mpg ~ transmission)
result$p.value
result$estimate
regmodel <- lm(mpg ~ ., data=mtcars)
summary(regmodel)
stepmodel <- step(regmodel, k=log(nrow(mtcars)))
summary(stepmodel)
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
ggplot(mtcars, aes(x=weightt, y=mpg, group=transmission, color=transmission, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
ggplot(mtcars, aes(x=weight, y=mpg, group=transmission, color=transmission, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
ggplot(mtcars, aes(x=quartermiletime, y=mpg, group=transmission, color=transmission, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("Quarter Mile Time in Seconds") + ggtitle("Scatter Plot of MPG vs. QuarterMileTime by Transmission")
interactionmodel<-lm(mpg ~ weight + quartermiletime + transmission + weight:transmission, data=mtcars)
summary(interactionmodel)
transmissionmodel<-lm(mpg ~ transmission, data=mtcars)
summary(transmissionodel)
summary(transmissionmodel)
anova(transmissionmodel, stepmodel, regmodel, interactionmodel)
confint(interactionmodel)
summary(interactionmodel)$coef
library(MASS)
dim(shuttle)
head(shuttle)
shuttle$newUse <- as.numeric(shuttle$use == "auto")
fit <- glm(newUse ~ as.factor(wind) - 1, data=shuttle, family="binomial")
odds <- exp(summary(fit)$coef)
odds[1] / odds[2] # 0.9686888
fit <- glm(newUse ~ as.factor(wind) + factor(magn) - 1,
family="binomial", data=shuttle)
summary(fit)$coef
exp(coef(fit))
odds <- exp(cbind(OddsRatio = coef(fit), confint(fit)))
odds[1] / odds[2] # 0.9684981
library(MASS)
dim(shuttle)
head(shuttle)
shuttle$newUse <- as.numeric(shuttle$use == "auto")
fit <- glm(newUse ~ as.factor(wind) - 1, data=shuttle, family="binomial")
odds <- exp(summary(fit)$coef)
odds[1] / odds[2] # 0.9686888
# Problem 2.
fit <- glm(newUse ~ as.factor(wind) + factor(magn) - 1,
family="binomial", data=shuttle)
summary(fit)$coef
exp(coef(fit))
odds <- exp(cbind(OddsRatio = coef(fit), confint(fit)))
odds[1] / odds[2] # 0.9684981
fit3 <- glm(I(1 - newUse) ~ as.factor(wind) - 1,
data=shuttle, family="binomial")
summary(fit3)$coef # -0.2513144 -0.2831263
summary(fit)$coef # 0.2513144 0.2831263
library(MASS)
dim(shuttle)
head(shuttle)
shuttle$newUse <- as.numeric(shuttle$use == "auto")
fit <- glm(newUse ~ as.factor(wind) - 1, data=shuttle, family="binomial")
odds <- exp(summary(fit)$coef)
odds[1] / odds[2] # 0.9686888
fit3 <- glm(I(1 - newUse) ~ as.factor(wind) - 1,
data=shuttle, family="binomial")
summary(fit3)$coef # -0.2513144 -0.2831263
summary(fit)$coef # 0.2513144 0.2831263
fit <- glm(count ~ spray - 1, data=InsectSprays, family="poisson")
summary(fit)$coef
rate <- exp(coef(fit))
rate[1] / rate[2] # 0.9456522
fit <- glm(count ~ as.factor(spray) + offset(log(count+1)),
family="poisson", data=InsectSprays)
fit2 <- glm(count ~ as.factor(spray) + offset(log(10)+log(count+1)),
family="poisson", data=InsectSprays)
summary(fit)$coef
summary(fit2)$coef
fit4 <- glm(count ~ as.factor(spray) + offset(log(count+1)),
family="poisson", data=InsectSprays)
fit5 <- glm(count ~ as.factor(spray) + offset(log(10)+log(count+1)),
family="poisson", data=InsectSprays)
summary(fit4)$coef
summary(fit5)$coef
as.factor(spray)B
fit4 <- glm(count ~ as.factor(spray) + offset(log(count+1)),
family="poisson", data=InsectSprays)
fit5 <- glm(count ~ as.factor(spray) + offset(log(10)+log(count+1)),
family="poisson", data=InsectSprays)
summary(fit4)$coef
summary(fit5)$coef
x <- -5 : 5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54,
3.87, 4.97)
knotPoint <- c(0)
spline <- sapply(knotPoint, function(knot) (x > knot) * (x - knot))
xMatrix <- cbind(1, x, spline)
fit <- lm(y ~ xMatrix - 1)
yhat <- predict(fit)
yhat
slope <- fit$coef[2] + fit$coef[3]
slope # 1.013
plot(x, y)
lines(x, yhat, col=2
)
install.packages("pROC")
?predict.lm
dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
dfCars <- dfCars[-c(1,2)]
dfCars <- dfCars[complete.cases(dfCars),]
dev.new(width=10, height=8)
make = dfCars$make
price = dfCars$price
plot(make, price, ylab="Price ($)", xlab="Car Manufacturer")
carVars <- c("make", "body_style", "engine_size", "horsepower", "highway_mpg", "price" )
filter_dfCars <- dfCars[carVars, "audi"]
newdata <- subset(dfCars, make == "audi",select=c("make", "body_style", "engine_size", "horsepower", "highway_mpg", "price")
summary(dfCars)
# Multiple Linear Regression Example
mod <- lm(price ~ make + body_style + engine_size + horsepower + highway_mpg, data=dfCars)
summary(mod) # show results
setwd("~/R/DevelopingDataProducts/DevelopingDataProducts_GitHub/DevelopingDataProducts")
dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
dfCars <- dfCars[-c(1,2)]
dfCars <- dfCars[complete.cases(dfCars),]
# Multiple Linear Regression Example
mod <- lm(price ~ make + body_style + engine_size + horsepower + highway_mpg, data=dfCars)
summary(mod) # show results
mod.r.squared
mod$r.squared
summary(mod)$r.squared
str(summary(mod))
pred <- predict(mod, newCar, interval = "prediction")
dfCars <- read.csv("CarPricePrediction/data/Automobile.csv", na.strings="?")
dfCars <- dfCars[-c(1,2)]
dfCars <- dfCars[complete.cases(dfCars),]
dev.new(width=10, height=8)
make = dfCars$make
price = dfCars$price
plot(make, price, ylab="Price ($)", xlab="Car Manufacturer")
carVars <- c("make", "body_style", "engine_size", "horsepower", "highway_mpg", "price" )
filter_dfCars <- dfCars[carVars, "audi"]
newdata <- subset(dfCars, make == "audi",select=c("make", "body_style", "engine_size", "horsepower", "highway_mpg", "price")
summary(dfCars)
# Multiple Linear Regression Example
mod <- lm(price ~ make + body_style + engine_size + horsepower + highway_mpg, data=dfCars)
summary(mod) # show results
# Other useful functions
coefficients(mod) # model coefficients
confint(mod, level=0.95) # CIs for model parameters
fitted(mod) # predicted values
residuals(mod) # residuals
anova(mod) # anova table
vcov(mod) # covariance matrix for model parameters
influence(mod) # regression diagnostics
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(mod)
make = "nissan"
body_style = "sedan"
engine_size = 140
horsepower = 100
highway_mpg = 25
newCar <- data.frame(make, body_style, engine_size, horsepower, highway_mpg)
pred <- predict(mod, newCar, interval = "prediction")
str(pred)
pred[1]
rpubsUpload("Car Price Prediction", "CarPricePrediction.html")
options(rpubs.upload.method = "internal")
options(rpubs.upload.method = "internal")
<style>
.small-code pre code {
font-size: 1em;
}
</style>
```{r setup, include=FALSE}
opts_chunk$set(dev = 'png')
dfCars <- read.csv("../data/Automobile.csv", na.strings="?")
dfCars <- dfCars[-c(1,2)]
dfCars <- dfCars[complete.cases(dfCars),]
```
CarPricePrediction
========================================================
author: Chris Benson
date:   24/10/2015
width:  1920
height: 1080
font-family: 'Helvetica'
Introduction
========================================================
The data we are using comes from the UCI Automobile Data Set that can be found in this link http://archive.ics.uci.edu/ml/datasets/Automobile.
Using this dataset we build a linear regrssion model over several variables and then predict the price of a car given these same variables. In order to achieve the outcome there were several steps:
- Explatory Data Analysis
- Clean the Data
- Build the model
- Run a prediction on the model
We used the following variables from the automobile dataset to create the prediction: Make, Body Style, Engine Size, Horsepower, and Highway MPG. this is demonstrated through the following shiny app: https://chrisbens.shinyapps.io/CarPricePrediction
Exploratory Data (Make vs Price)
========================================================
```{r, fig.width = 30, fig.height = 15, echo=FALSE}
par(mar=c(7.1,4.1,4.1,2.1))
make = dfCars$make
price = dfCars$price
plot(make, price, ylab="Price ($)", las=2, main="Make vs Price")
```
The Model
=======================================================
class: small-code
Below we show the variable and where the model is built. We then use the "anova" package to display the Variance Table.
```{r, echo=TRUE, width=20, size="small"}
mod <- lm(price ~ make + body_style + engine_size + horsepower + highway_mpg, data=dfCars)
summary(mod) # show results
```
From these results and the results on the next slide, this model has a pretty good fit over the data. A Residual standad error of `r round(summary(mod)$sigma)` and an Adjusted R^2 value is `r round(summary(mod)$adj.r.squared, 2)` provides for a good model.
Summary
=======================================================
class: small-code
If we run a predict command over the model using some new data, we get the following prediction
```{r, echo=TRUE}
make = "nissan"
body_style = "sedan"
engine_size = 140
horsepower = 100
highway_mpg = 25
newCar <- data.frame(make, body_style, engine_size, horsepower, highway_mpg)
pred <- predict(mod, newCar, interval = "prediction")
pred
```
The 95% prediction interval for the above variables puts the price of a `r paste(make, ' ', body_style, ' with an engine size of ', engine_size, ', horsepower of ', horsepower, ' and an average Highway MPG of ', highway_mpg)` between $`r round(pred[2])` and $`r as.integer(round(pred[3]))` with a fit of $`r as.integer(round(pred[1]))`.
This can also be demonstrated through the use of the shiny application:  https://chrisbens.shinyapps.io/CarPricePrediction
